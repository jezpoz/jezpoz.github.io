{"version":3,"sources":["webpack:///./src/components/projects-section/projects/project/project.tsx","webpack:///./src/components/projects-section/projects/projects.tsx","webpack:///./src/components/projects-section/tags/tags.tsx","webpack:///./src/components/projects-section/projects-section.tsx","webpack:///./src/hooks/tags/get-tags-graphql.ts","webpack:///./src/hooks/projects/get-projects-graphql.ts","webpack:///./src/hooks/about/about-graphql.ts","webpack:///./src/components/hero/hero.tsx","webpack:///./node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js","webpack:///./src/pages/index.tsx"],"names":["Project","project","className","to","slug","current","fluid","mainImage","asset","title","description","tags","map","tag","key","_id","toggleTagState","Projects","projects","length","Tags","event","ProjectsSection","getSelectedTags","selected","filter","result","isBrowser","window","allSanityTag","useStaticQuery","allSanityProject","useState","nodes","setProjects","sessionStorageSelectedTags","JSON","parse","sessionStorage","getItem","includes","setTags","selectedTags","setSelectedTags","viewAllSelected","setViewAllSelected","useEffect","includeProject","tagIndex","id","toggledTag","persist","isViewAll","newViewAllState","modifiedTags","newSelectedTags","setItem","stringify","Hero","obj","TypeError","about","sanityAbout","IndexPage"],"mappings":"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","file":"component---src-pages-index-tsx-e9f34bfca94f4aebad61.js","sourcesContent":["import { Link } from \"gatsby\";\nimport Img from \"gatsby-image\";\nimport React, { FunctionComponent } from \"react\";\nimport { IProjectProps } from \"../../../../contracts/projects/project/iproject-props\";\nimport { ITag } from \"../../../../contracts/tags/tag/itag\";\nimport Tag from \"../../tags/tag/tag\";\nimport \"./project.scss\";\n\nconst Project: FunctionComponent<IProjectProps> = ({ project }) => {\n  return <Link className=\"project-card\" to={'/project/' + project.slug.current}>\n    <Img className=\"project-image\" fluid={project.mainImage.asset.fluid} />\n    <div className=\"project-content-container\">\n      <div className=\"project-text-container\">\n      <div className=\"project-name\">{ project.title }</div>\n        <p className=\"project-description\">{ project.description }</p>\n      </div>\n      <div className=\"project-tags-container\">\n        {\n          project.tags.map((tag: ITag) => <Tag key={tag._id} tag={tag} toggleTagState={null} />)\n        }\n      </div>\n    </div>\n  </Link>;\n}\n\nexport default Project\n\n","import React, { FunctionComponent } from \"react\";\nimport { IProjectsProps } from '../../../contracts/projects/iprojects-props';\nimport { IProject } from \"../../../contracts/projects/project/iproject\";\nimport Project from \"./project/project\";\nimport \"./projects.scss\";\n\nconst Projects: FunctionComponent<IProjectsProps> = ({ projects }) => {\n  return <div className=\"projects-container\">\n    {\n      projects.length > 0 ?\n        projects.map((project: IProject) => <Project key={project._id} project={{...project}} />)\n        :\n        <p className=\"no-results\">No projects with the current set of selected tags.</p>\n    }\n  </div> \n}\n\nexport default Projects","import React, { FunctionComponent, MouseEvent } from \"react\";\nimport { ITagsProps } from \"../../../contracts/tags/itags-props\";\nimport { ITag } from \"../../../contracts/tags/tag/itag\";\nimport Tag from \"./tag/tag\";\nimport './tags.scss';\n\nconst Tags: FunctionComponent<ITagsProps> = ({ tags, toggleTagState }) => {\n  return <div className=\"tags-container\">\n    {\n      tags.map((tag: ITag) => {\n        return <Tag tag={tag} key={tag._id} toggleTagState={(event: MouseEvent, tag: ITag) => toggleTagState(event, tag)} />\n      })\n    }\n  </div>;\n}\n\nexport default Tags","import React, { MouseEvent, useEffect, useState } from \"react\";\nimport { IProject } from \"../../contracts/projects/project/iproject\";\nimport { ITag } from \"../../contracts/tags/tag/itag\";\nimport { GetAllProjects } from \"../../hooks/projects/get-projects-graphql\";\nimport { GetTagsGraphql } from \"../../hooks/tags/get-tags-graphql\";\nimport \"./projects-section.scss\";\nimport Projects from \"./projects/projects\";\nimport Tags from \"./tags/tags\";\n\nconst ProjectsSection = () => {\n\n  /**\n   * Gets and returns the list of selected tags.\n   * @param {ITag[]} tags \n   * @returns {string[]}\n   */\n  const getSelectedTags = (tags: ITag[]): string[] => {\n    return tags.map((tag: ITag) => tag.selected ? tag._id : null)\n    .filter((result: string) => result !== null);\n  }\n\n  /**\n   * Toggles the selected state of a tag/tags on tag click.\n   * @param {MouseEvent} event \n   * @param {ITag} toggledTag \n   * @param {ITag[]} tags \n   * @returns {ITag[]}\n   */\n  const toggleTagState = (event: MouseEvent, toggledTag: ITag, tags: ITag[]): ITag[] => {\n    event.persist();\n    // If the view all tag is already selected, return the existing set of tags.\n    if (toggledTag.isViewAll && toggledTag.selected) {\n      return tags;\n    }\n    // If the toggled tag is the view all tag, get its new value, otherwise set to false.\n    let newViewAllState: boolean = toggledTag.isViewAll ? !toggledTag.selected : false;\n    setViewAllSelected(newViewAllState ? newViewAllState : false);\n    let modifiedTags: ITag[] = tags.map((tag: ITag) => {\n      // If the toggled tag is view all...\n      if (toggledTag.isViewAll) {\n        // And if the current tag is view all, set its new selected state.\n        if (tag.isViewAll) {\n          tag.selected = newViewAllState;\n          return tag;\n        }\n        // If the current tag is not view all, set the new selected state of the tag.\n        tag.selected = newViewAllState ? false : true;\n        return tag;\n      }\n      // If the toggled tag is not view all...\n      // but the current tag is view all and selected, set the view all tag to false since\n      // we are selecting a different tag.\n      if (tag.isViewAll && tag.selected) {\n        tag.selected = false;\n        return tag;\n      }\n      // and if the current tag is the tag being toggled...\n      if (tag._id === toggledTag._id) {\n        // and if it is already selected and no other tags are selected, keep it selected\n        // and return the existing tag.\n        if (tag.selected && selectedTags.length === 1) {\n          return tag;\n        }\n        // otherwise set its new selected state.\n        tag.selected = !tag.selected;\n      }\n      // Return the tag.\n      return tag;\n    });\n    // Set the selected tags only if the view all state is false.\n    const newSelectedTags: string[] = newViewAllState ? [] : getSelectedTags(modifiedTags);\n    setSelectedTags(newSelectedTags);\n    if (isBrowser) {\n      sessionStorage.setItem('selectedTags', JSON.stringify(newSelectedTags));\n    }\n    // Return the modified set of tags.\n    return modifiedTags;\n  }\n\n  // Check if the code is executing on the browser or server.\n  const isBrowser: boolean = typeof window !== 'undefined';\n\n  const { allSanityTag } = GetTagsGraphql();\n  const { allSanityProject } = GetAllProjects();\n  const [ projects, setProjects ] = useState(allSanityProject.nodes);\n  const sessionStorageSelectedTags: string[] = isBrowser ? JSON.parse(sessionStorage.getItem('selectedTags')) : [];\n  const [ tags, setTags ] = useState(sessionStorageSelectedTags?.length ? allSanityTag.nodes.map((tag: ITag) => {\n    if (sessionStorageSelectedTags.includes(tag._id)) {\n      tag.selected = true;\n    } else {\n      tag.selected = false;\n    }\n    return tag;\n  }) : allSanityTag.nodes);\n  const [ selectedTags, setSelectedTags ] = useState(sessionStorageSelectedTags?.length ? sessionStorageSelectedTags : getSelectedTags(tags));\n  const [ viewAllSelected, setViewAllSelected ] = useState(sessionStorageSelectedTags?.length ? false : true);\n  // When the selected tags or the view all state has changed, filter the projects based on the selected tags.\n  useEffect(() => {\n    setProjects(viewAllSelected ? allSanityProject.nodes : allSanityProject.nodes.filter((project: IProject) => {\n      let includeProject: boolean = false;\n      for (let tagIndex: number = 0; tagIndex < project.tags.length; tagIndex++) {\n        if (selectedTags.includes(project.tags[tagIndex]._id)) {\n          includeProject = true;\n        }\n      }\n      return includeProject;\n    }));\n  }, [selectedTags, viewAllSelected]);\n  return (\n    <div id=\"projects\" className=\"projects-section-container\">\n      <h2>Projects</h2>\n      <Tags tags={tags} toggleTagState={(event: MouseEvent, tag: ITag) => setTags(toggleTagState(event, tag, tags))} />\n      <Projects projects={projects}/>\n    </div>\n  );\n}\n\nexport default ProjectsSection","import { graphql, useStaticQuery } from \"gatsby\";\nimport { IGetTagsResponse } from \"./iget-tags-response\";\n\nexport const GetTagsGraphql = (): IGetTagsResponse => {\n  const projectsAndTags: IGetTagsResponse = useStaticQuery(\n    graphql`\n      {\n        allSanityTag(sort: {fields: title, order: ASC}) {\n          nodes {\n            _id\n            title\n            description\n            selected\n            isViewAll\n          }\n        }\n      }\n    `\n  )\n  return projectsAndTags;\n}","import { graphql, useStaticQuery } from \"gatsby\";\nimport { IGetProjectsResponse } from \"../../contracts/projects/iget-projects-response\";\n\nexport const GetAllProjects = () => {\n  const projects: IGetProjectsResponse = useStaticQuery(\n    graphql`\n      query {\n        allSanityProject {\n          nodes {\n            _id\n            title\n            description\n            slug {\n              current\n            }\n            tags {\n              _id\n              title\n            }\n            mainImage {\n              asset {\n                fluid(maxWidth: 1200) {\n                  ...GatsbySanityImageFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    `\n  )\n  return projects;\n}","import { graphql, useStaticQuery } from \"gatsby\";\nimport { IGetAboutResponse } from \"../../contracts/about/iget-about-response\";\n\nexport const GetAbout = () => {\n  const about: IGetAboutResponse = useStaticQuery(\n    graphql`\n      query {\n        sanityAbout {\n          title\n          description\n          mainImage {\n            asset {\n              fluid(maxWidth: 1200) {\n                ...GatsbySanityImageFluid\n              }\n            }\n          }\n        }\n      }\n    `\n  )\n  return about;\n}","import Img from \"gatsby-image\";\nimport React from \"react\";\nimport { IAbout } from \"../../contracts/about/iabout\";\nimport { GetAbout } from \"../../hooks/about/about-graphql\";\nimport \"./hero.scss\";\n\nconst Hero = ({ }) => {\n  const about: IAbout = GetAbout().sanityAbout;\n  return <div className=\"hero-container\" id=\"about\" >\n    <div className=\"hero-content-container\">\n      <div className=\"about-image-container\">\n        <Img className=\"about-image\" fluid={about.mainImage.asset.fluid} />\n      </div>\n      <div className=\"about-content-container\">\n        <h2>{about.title}</h2>\n        <p>{about.description}</p>\n      </div>\n    </div>\n  </div> \n}\n\nexport default Hero","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}","import React from \"react\"\nimport Layout from \"../components/layout/layout\"\nimport ProjectsSection from \"../components/projects-section/projects-section\"\nimport SEO from \"../components/seo\"\nimport Hero from \"../components/hero/hero\"\n\nconst IndexPage = () => (\n  <Layout>\n    <SEO title=\"Home\" />\n    <Hero />\n    <ProjectsSection />\n  </Layout>\n)\n\nexport default IndexPage\n"],"sourceRoot":""}